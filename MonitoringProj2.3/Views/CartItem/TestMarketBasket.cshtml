<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Testing Market Basket</title>
    <link rel="stylesheet" href="~/css/marketBasket.css" />
</head>
<body>
    <h1>Testing Market Basket</h1>
     <input type="text" id="search" name="item" placeholder="Item..." list="itemslist">
    <button onclick="processcartitems()">Find</button>
    <br />

    <div class="float-container">
        <ul id="topthree" style="list-style-type:none;"></ul>
    </div>

    <br />

    <p> Testing Data </p>
    <img style="width: 250px;" src="~/Images/Test/Test Data.png" />
    <br />
    <p> Testing Results </p>
    <img style="width: 900px;" src="~/Images/Test/Expected_results.png" />


    <script type="text/javascript" >
            var hpitems = [{ "Id": 1, "CartId": 1, "Cart": null, "Item": "Dog", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 2, "CartId": 1, "Cart": null, "Item": "Dog Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 3, "CartId": 1, "Cart": null, "Item": "Dog Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 4, "CartId": 1, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 5, "CartId": 1, "Cart": null, "Item": "Dog Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 6, "CartId": 1, "Cart": null, "Item": "Dog Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 7, "CartId": 1, "Cart": null, "Item": "Dog Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 8, "CartId": 1, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 9, "CartId": 1, "Cart": null, "Item": "Dog Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 10, "CartId": 3, "Cart": null, "Item": "Dog Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 11, "CartId": 3, "Cart": null, "Item": "Dog Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 12, "CartId": 3, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 13, "CartId": 3, "Cart": null, "Item": "Dog Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 14, "CartId": 3, "Cart": null, "Item": "Dog", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 15, "CartId": 2, "Cart": null, "Item": "Cat Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 16, "CartId": 2, "Cart": null, "Item": "Cat Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 17, "CartId": 2, "Cart": null, "Item": "Cat Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 18, "CartId": 2, "Cart": null, "Item": "Cat Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 19, "CartId": 2, "Cart": null, "Item": "Cat", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 20, "CartId": 4, "Cart": null, "Item": "Cat", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 21, "CartId": 4, "Cart": null, "Item": "Cat Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 22, "CartId": 4, "Cart": null, "Item": "Cat Toy", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 23, "CartId": 4, "Cart": null, "Item": "Cat Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 24, "CartId": 2, "Cart": null, "Item": "Cat Food", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 25, "CartId": 4, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 26, "CartId": 5, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 },
    { "Id": 27, "CartId": 2, "Cart": null, "Item": "Flea Medicine", "Timestamp": "2015-06-23T04:30:21", "Quantity": 2, "Removed": false, "Cost": 23.24, "TotalCost": 46.48 }];

    const search = document.getElementById('search');
    const topthree = document.getElementById('topthree');
    var itemslist = ["Cat", "Dog", "Cat Toy", "Cat Food", "Dog Food", "Dog Toy", "Flea Medicine"]; // hold the names of the items
    var xCartList = []; // hold all cart ids where search occurs, do not allow duplicateds
    var results = []; // hold results;
    let TC; //hold Total of carts
    let TC_X; //hold Total of carts where x occurs
    var TC_Y = []; //hold Total of carts where y occurs
    var TC_XY = []; //hold Total of carts where both x and y occur

    /// Controller
    function processcartitems() {
        xCartList = []; // hold all cart ids where search occurs, do not allow duplicateds
        results = []; // hold results;
        TC; //hold Total of carts
        TC_X; //hold Total of carts where x occurs
        TC_Y = []; //hold Total of carts where y occurs
        TC_XY = []; //hold Total of carts where both x and y occur
        console.log(search.value);
        console.log(hpitems);

        // Prep data
        getItems();
        getTC();
        getTC_X();
        getTC_Y();
        getTC_XY();
        //math
        getSupport();
        getConfidence();
        getLift();
        calcPercentages()
        getTopThree();
    }

    ////////////////////////////////////////////////////   DATA PREP BELOW AFTER SEARCH   //////////////////////////////////////////////////

    // Get all cartId and add to a list, do not allow duplicates
    function getTC() {
        var cartList = [];

        for (i = 0; i <= hpitems.length - 1; i++) {
            cartList.push(hpitems[i].CartId);
        }
        cartList = [...new Set(cartList)];

        TC = getCount(cartList);
    }

    // Get cartid's where x exist and add to a list, do not allow duplicates
    // get count of carts where x exists
    function getTC_X() {
        for (i = 0; i <= hpitems.length - 1; i++) {
            if (hpitems[i].Item == search.value) {
                xCartList.push(hpitems[i].CartId);
            }
        }
        xCartList = [...new Set(xCartList)];

        TC_X = getCount(xCartList);
    }

    // get count of carts where y exists
    function getTC_Y() {
        var count;
        var cartIds = [];

        TC_Y = duplicateList(results);

        for (i = 0; i <= TC_Y.length - 1; i++) {
            for (k = 0; k <= hpitems.length - 1; k++) {
                if (hpitems[k].Item == TC_Y[i][0]) {
                    cartIds.push(hpitems[k].CartId);
                }
            }
            cartIds = [...new Set(cartIds)];
            count = getCount(cartIds)
            TC_Y[i][1] = count;
            cartIds = [];
        }
    }

    // get count of carts where x and y exists
    function getTC_XY() {
        var yCartId = [];
        var count = 0;
        var hpItems_Edited = duplicateList(hpitems);
        TC_XY = duplicateList(results);

        hpItems_Edited = removeNotxCartList(hpItems_Edited);

        for (i = 0; i <= TC_XY.length - 1; i++) {
            for (k = 0; k <= hpItems_Edited.length - 1; k++) {
                if (hpItems_Edited[k].Item == TC_XY[i][0]) {
                    yCartId.push(hpItems_Edited[k].CartId);
                }
            }
            yCartId = [...new Set(yCartId)];
            count = getCount(yCartId)
            TC_XY[i][1] = TC_XY[i][1] + count;
            yCartId = [];
        }
    }

    //remove hpitems where cartid not equal to xCartList
    function removeNotxCartList(list) {
        var list2 = [];
        for (i = 0; i <= xCartList.length; i++) {
            for (k = 0; k <= list.length - 1; k++) {
                if (list[k].CartId == xCartList[i]) {
                    list2.push(list[k]);
                }
            }
        }

        return list2;
    }


    // Get list of items and remove x from list
    function getItems() {
        comparableslist();

        // remove Item equaled to search value
        for (i = 0; i <= results.length - 1; i++) {
            if (results[i][0].toString() == search.value) {
                results.splice(i, 1);
                i--;
            }
        }
    }

    // Duplicate a list and return the copy, Deep copy
    function duplicateList(list) {
        var returnList = [];
        returnList = JSON.parse(JSON.stringify(list));

        return returnList;
    }

    // return the count of the list
    function getCount(list) {
        return list.length;
    }

    //populate list with all comparables with its count
    function comparableslist() {
        results = [];
        for (i = 0; i <= itemslist.length - 1; i++) {

            results.push([itemslist[i], 0]);
        }
        console.log(results);
    }

    //////////////////////////////////////////// MATH BELOW ////////////////////////////////////


    /// Get support for each
    function getSupport() {
        let support;
        let top = 0;
        for (i = 0; i <= results.length - 1; i++) {
            for (k = 0; k <= TC_XY.length - 1; k++) {
                if (results[i][0] == TC_XY[k][0]) {
                    top = TC_XY[k][1];
                    support = top / TC;
                }
                results[i][1] = support;
            }
        }

    }

    /// Get Confidence for each
    function getConfidence() {
        let confidence;
        for (i = 0; i <= results.length - 1; i++) {
            for (k = 0; k <= TC_XY.length - 1; k++) {
                if (results[i][0] == TC_XY[k][0]) {
                    confidence = TC_XY[k][1] / TC_X;
                }
                results[i][2] = confidence;
            }
        }
    }

    /// Get Lift for each
    function getLift() {
        let lift;
        for (i = 0; i <= results.length - 1; i++) {
            for (k = 0; k <= TC_XY.length - 1; k++) {
                for (j = 0; j <= TC_Y.length - 1; j++) {
                    if (results[i][0] == TC_XY[k][0] && results[i][0] == TC_Y[j][0]) {
                        lift = (TC_XY[k][1] / (TC_X + TC_XY[k][1])) / (TC_Y[j][1] / TC);
                    }
                    results[i][3] = lift;
                }
            }
            console.log(i);
        }
    }

    function calcPercentages() {
        // turn confidence and support to percentages
        for (i = 0; i <= results.length - 1; i++) {
            //support
            results[i][1] = Math.round(results[i][1] * 100);
            //confidence
            results[i][2] = Math.round(results[i][2] * 100);
            //lift
            results[i][3] = results[i][3];

        }
    }

    function compareSecondColumn(a, b) {
        if (a[1] === b[1]) {
            return 0;
        }
        else {
            return (a[1] < b[1]) ? -1 : 1;
        }
    }

    /// Get the top 3 items corresponding to the searched Item
    function getTopThree() {
        var items = [];
        results.sort(compareSecondColumn);
        results.reverse();

        console.log(TC);
        console.log(TC_X);
        console.log(TC_XY);
        console.log(TC_Y);
        //limit the return to max 3 items
        for (i = 0; i <= results.length - 1; i++) {
            if (i >= 3) {
                break;
            }
            else {
                if (results[i][1] != 0 || results[i][2] != 0 || results[i][3] != 0) {
                    items.push(results[i]);
                }
            }
        }

        items = items.map(function(elem){

            return {"item":elem[0], "support":elem[1], "confidence":elem[2],"lift":elem[3] };
        });

        displayTopThree(items);
    }

    // Display result
    const displayTopThree = (items) => {
    const htmlString = items
    .map((itemscount) => {
        return `
            <div class="float-child" style="text-align:center;">
                <ul style="list-style-type:none; text-align:center; padding:25px;">
                    <li class="items">
                        <h4>${itemscount.item}</h4>
                        <p>Support Percent: ${itemscount.support}%</p>
                        <p>Confidence Percent: ${itemscount.confidence}%</p>
                        <p>Lift: ${itemscount.lift}</p>
                    </li>
                </ul>
            </div>
    `;
    })
    .join('');
    topthree.innerHTML = htmlString;
    };
    </script>
</body >
</html >
